{"version":3,"file":"sc-format-date.js","sourceRoot":"","sources":["../../../../src/components/util/format-date/sc-format-date.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAMhD,MAAM,OAAO,YAAY;;;oBAKgB,IAAI,IAAI,EAAE;;;;;;;;;;;0BAiCsB,MAAM;oBAExC,MAAM;;IAE3C,MAAM;QACJ,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QACjG,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC;QAEjF,4BAA4B;QAC5B,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC;YAClC,OAAO;QACT,CAAC;QAED,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE;YAC1C,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,MAAM;SACf,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'sc-format-date',\n  shadow: false,\n})\nexport class ScFormatDate {\n  /** The locale to use when formatting the date/time. */\n  @Prop() locale: string;\n\n  /** The date/time to format. If not set, the current date and time will be used. */\n  @Prop() date: Date | string | number = new Date();\n\n  /** The format for displaying the weekday. */\n  @Prop() weekday: 'narrow' | 'short' | 'long';\n\n  /** The format for displaying the era. */\n  @Prop() era: 'narrow' | 'short' | 'long';\n\n  /** The format for displaying the year. */\n  @Prop() year: 'numeric' | '2-digit';\n\n  /** The format for displaying the month. */\n  @Prop() month: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';\n\n  /** The format for displaying the day. */\n  @Prop() day: 'numeric' | '2-digit';\n\n  /** The format for displaying the hour. */\n  @Prop() hour: 'numeric' | '2-digit';\n\n  /** The format for displaying the minute. */\n  @Prop() minute: 'numeric' | '2-digit';\n\n  /** The format for displaying the second. */\n  @Prop() second: 'numeric' | '2-digit';\n\n  /** The format for displaying the time. */\n  @Prop({ attribute: 'time-zone-name' }) timeZoneName: 'short' | 'long';\n\n  /** The time zone to express the time in. */\n  @Prop({ attribute: 'time-zone' }) timeZone: string;\n\n  /** When set, 24 hour time will always be used. */\n  @Prop({ attribute: 'hour-format' }) hourFormat: 'auto' | '12' | '24' = 'auto';\n\n  @Prop() type: 'timestamp' | 'date' = 'date';\n\n  render() {\n    const dateString = this.type === 'timestamp' ? parseInt(this.date.toString()) * 1000 : this.date;\n    const date = new Date(dateString);\n    const hour12 = this.hourFormat === 'auto' ? undefined : this.hourFormat === '12';\n\n    // Check for an invalid date\n    if (isNaN(date.getMilliseconds())) {\n      return;\n    }\n\n    return new Intl.DateTimeFormat(this.locale, {\n      weekday: this.weekday,\n      era: this.era,\n      year: this.year,\n      month: this.month,\n      day: this.day,\n      hour: this.hour,\n      minute: this.minute,\n      second: this.second,\n      timeZoneName: this.timeZoneName,\n      timeZone: this.timeZone,\n      hour12: hour12,\n    }).format(date);\n  }\n}\n"]}